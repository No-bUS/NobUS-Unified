<Project Sdk="">
  <Target
    Name="DownloadMaterialIcons"
    BeforeTargets="PrepareForBuild"
    Inputs="@(MaterialIconFont->'%(SourceUrl)')"
    Outputs="@(MaterialIconFont->'$(MaterialIconsDirectory)\\%(Identity)')"
  >
    <PropertyGroup>
      <MaterialIconsDirectory>$(MSBuildThisFileDirectory)..\Resources\Fonts</MaterialIconsDirectory>
      <MaterialIconsRepositoryBase>https://raw.githubusercontent.com/google/material-design-icons/master/font</MaterialIconsRepositoryBase>
    </PropertyGroup>
    <ItemGroup>
      <MaterialIconFont Include="MaterialIcons-Regular.ttf">
        <SourceUrl>$(MaterialIconsRepositoryBase)/MaterialIcons-Regular.ttf</SourceUrl>
      </MaterialIconFont>
      <MaterialIconFont Include="MaterialIconsOutlined-Regular.otf">
        <SourceUrl>$(MaterialIconsRepositoryBase)/MaterialIconsOutlined-Regular.otf</SourceUrl>
      </MaterialIconFont>
      <MaterialIconFont Include="MaterialIconsRound-Regular.otf">
        <SourceUrl>$(MaterialIconsRepositoryBase)/MaterialIconsRound-Regular.otf</SourceUrl>
      </MaterialIconFont>
      <MaterialIconFont Include="MaterialIconsSharp-Regular.otf">
        <SourceUrl>$(MaterialIconsRepositoryBase)/MaterialIconsSharp-Regular.otf</SourceUrl>
      </MaterialIconFont>
    </ItemGroup>
    <MakeDir Directories="$(MaterialIconsDirectory)" />
    <DownloadMaterialIconFont
      DestinationDirectory="$(MaterialIconsDirectory)"
      IconFonts="@(MaterialIconFont)"
    />
  </Target>
  <UsingTask
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll"
    TaskFactory="RoslynCodeTaskFactory"
    TaskName="DownloadMaterialIconFont"
  >
    <ParameterGroup>
      <IconFonts ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <DestinationDirectory ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Net.Http" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Code Language="cs" Type="Fragment">
        <![CDATA[
                using var client = new HttpClient();

                foreach (var font in IconFonts)
                {
                    var sourceUrl = font.GetMetadata("SourceUrl");
                    if (string.IsNullOrWhiteSpace(sourceUrl))
                    {
                        throw new Exception($"Missing SourceUrl metadata for {font.ItemSpec}.");
                    }

                    var fileName = string.IsNullOrWhiteSpace(font.ItemSpec)
                        ? Path.GetFileName(new Uri(sourceUrl).AbsolutePath)
                        : font.ItemSpec;
                    var filePath = Path.Combine(DestinationDirectory, fileName);

                    if (File.Exists(filePath))
                    {
                        Log.LogMessage(MessageImportance.Low, $"Skipping download for {fileName}; file already exists.");
                        continue;
                    }

                    Log.LogMessage(MessageImportance.High, $"Downloading {fileName} from {sourceUrl}.");

                    using var response = client.GetAsync(sourceUrl).Result;
                    if (!response.IsSuccessStatusCode)
                    {
                        throw new Exception($"Failed to download {fileName} from {sourceUrl}. Status code: {response.StatusCode}");
                    }

                    using var fs = new FileStream(filePath, FileMode.Create, FileAccess.Write, FileShare.None);
                    response.Content.CopyToAsync(fs).Wait();
                    Log.LogMessage(MessageImportance.High, $"Saved {fileName} to {filePath}.");
                }
              ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>
